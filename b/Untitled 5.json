[
  {
    "lines": [
      "System Layers",
      "Data Flow (ingestionprocessing storage optimization response)",
      "Technology Choices (why each)",
      "Integration points (Rust  Python  SurrealDB APls)",
      "Prototype execution flow (step-by-step)",
      "9 End-to-nd Workflow: Railway Intelligent",
      "Decision-Support System",
      "1. System Architecture Layers",
      "Data Sources (Indian Railways context)",
      "Real-time data: rain running status, delays, location, timetable, platform availability,",
      "signalling",
      "APls:",
      "RailwayAPl (3rd-party, Indian Railways)ve train running status, PNR. station",
      "schedule.",
      "[IRCTC unofficial APls] (real-time train positions via scraping).",
      "[NTES APIs (if accessible via trial. Indian Railways official feed)]",
      "Synthetic data: fallback when APls are not open simulate train movements.",
      "delays, signalling disruptions",
      "2 Data Engineering (Rust)",
      "Ingestion Pipelines: Rust async services (okio, Reqwest) to pull from",
      "APls/simulators",
      "Transform & Normalize: map raw feeds  unified schema (train id, section id,",
      "priority, delay, location, ETA, etc.).",
      "Stream Processing: use Kafka Or NATS for real-time feed. optional (or keep",
      "lightweight using tokio: :mpsc )",
      "Storage: Persist in SurrealDB (graph  time-series ike queries for section conflicts)",
      "3 Backend (Rust)",
      "Expose APls to:",
      "Query current train states.",
      "Trigger optimization request for a corridor.",
      "Serve controller dashboards (via frontend).",
      "Adaptor for SurrealDB (Rust driver).",
      "RPC/bridge with Python models (via gRPC or Py03 bindings)",
      "4. Optimization & Al/M (Python)"
    ],
    "page": 1
  },
  {
    "lines": [
      "OR-Tools (constraint programming):",
      "Model precedence rules, track sections, crossing constraints, priorities",
      "Solve for minimal delay & maximal throughput",
      "AI/ML:",
      "Predict train delays based on historical data/weather.",
      "Reinforcement learning for \"what-if re-optimization.",
      "o. Controller Dashboard (UI)",
      "Displays:",
      "Suggested precedence & crossing schedules.",
      "Conflict resolution explanation.",
      "What-if scenario comparisons.",
      "KPls (punctuality, throughput, avg delay).",
      "Exposed via Rust backend APls React/Next.js frontend",
      "2. Data Flow (Step-by-Step)",
      "Step 1 Ingestion",
      "Rust async jobs query real-time APls every X seconds ",
      "Data Is validated & normalized into a common schema",
      "Push into SurrealDB (historical + ive tables).",
      "Step 2Processing",
      "Rust event pipeline listens to neW updates (train enters section, delay reported).",
      "Backend triggers Python OR-Tools service for re-optimization when:",
      "Delay > threshold",
      "Section conflict (two trains scheduled for same crossing).",
      "Controller requests \"re-simulate\"",
      "Step 3Optimization",
      "Python service fetches required slice of data from SurrealDB",
      "Runs constraint solver (precedence + crossing optimization).",
      "Produces new feasible schedule sends back via gRPC/REST to Rust backen",
      "Step 4Response to Controllers",
      "Backend persists optimization result into SurrealDB (audit retrieval) ",
      "Controller dashboard shows recommendation + \"why' (e.g., Freight train delayed 15min,",
      "Passenger train gets priority)"
    ],
    "page": 2
  },
  {
    "lines": [
      "What-if analysis: user tweaks  re-submit to optimizer.",
      "3. Technology Choices & Justification",
      "Tech",
      "Rust (Tokio + Reqwest)",
      "Why",
      "Fast, async, memory safe for real-time",
      "APls",
      "Lightweight but scalable",
      "Graph + time-series + SQL-ike queries",
      "~ perfect for train networks",
      "High-perf, integrates with SurrealDB",
      "Rich ecosystem for optimization & M",
      "Clear contract between Rust backend",
      "and Python solver",
      "Simple, interactive visualization for",
      "controllers",
      "Layer",
      "Data Ingestion",
      "Stream",
      "Processing (opt)",
      "Storage",
      "Kafka/NATS or just",
      "tokio: :mpsc",
      "SurrealDB",
      "Backend APls",
      "OR/AI",
      "Integration",
      "Dashboardd",
      "Rust (Axum/Actix)",
      "Python (OR-Tools + scikit-",
      "earn/Py Torch)",
      "gRPC or Py03 bindings",
      "React/Next.Is",
      "4. Prototype Execution Flow",
      "Start data ingestion service (Rust)  pull live train AP for chosen corridor (say Delhi-",
      "Howrah).",
      "? Store all train movement events into SurrealDB",
      "3. Backend AP(/optimize?section=XYZ) calls Python service with current corridor state",
      "4 Python solver returns optimized precedence/crossing schedule",
      "o. Backend persists schedule + streams update to U.",
      "o. Controller can click what if triggers solver with modified constraints",
      "5. Rea -Wor d Operations Knowledge Mapping",
      "Precedence Rules:",
      "Mail/Express> Passenger > Freight_",
      "Emergency trains override.",
      "Signalling:"
    ],
    "page": 3
  },
  {
    "lines": [
      "Absolute Block: only one train in a block section .",
      "Automatic Signalling: multiple trains if spaced by signals",
      "Timetable Practices:",
      "Sectional running time fixed",
      "Padding time for delays.",
      "Regulatory Compliance:",
      "Always safety-first, no two trains in same block",
      "Al outputs must explain reasoning  audit trall",
      "6. End-to-End Prototype Overview",
      "Error parsing Mermaid diagram!",
      "Parse error on line 7:",
      "ontroller Dashboard (React)] F -->Use",
      "Expecting 'SQE\", \"DOUBLECIRCLEEND\", \"PE\", \"-, \"STADIUMEND",
      "SUBROUTINFEND'PIPE' 'CYLINDEREND\"DIAMOND STOPTAGEND",
      "INVTRAPEND\"UNICODE TEXTTEXTTAGSTART, got \"PS",
      "TRAPEND",
      "? This workflow Is full-proof for hackathon:",
      "Uses real-time APls where possible (fallback synthetic).",
      "Rust ensures high-performance backend & data pipelines",
      "Python gives optimization power.",
      "SurrealDB acts aS a unified brain for historical + real-time train state.",
      "Supports auditability, controller overrides. re-optimization which matches R",
      "standards.",
      "Would you ike me to expand this into a \"Hackathon Implementation Roadmap\" (week-",
      "oy-week) so you know what to build first and what to keep lightweight for demo VS. later",
      "production-level?"
    ],
    "page": 4
  }
]